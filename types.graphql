enum Interest {
  READING
  MATH
  WRITING
  HOMEWORK
}

enum Expmonth {
  JANUARY
  FEBRUARY
  MARCH
  APRIL
  MAY
  JUNE
  JULY
  AUGUST
  SEPTEMBER
  OCTOBER
  NOVEMBER
  DECEMBER
}

type Contact @model{
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  fullName: String!
  email: String! @isUnique
  phone: String!
  interest: Interest!
}

# add relation between user personal info and PaymentInfo
# create new type for quote generator
type User @model {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String! @isUnique
  password: String!
  personalInfo: PersonalInfo @relation(name: "PersonalInfoOnUser")
}

type PersonalInfo @model {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  studentName: String!
  parentName: String!
  parentEmail: String!
  parentAddress: String!
  parentPhoneNumber: String!
  teacherEmail: String!
  user: User! @relation(name: "PersonalInfoOnUser")
}

type PaymentInfo @model {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  owner: String!
  cvv: String!
  cardNumber: String!
  expMonth: Expmonth!
  expYear: String!
}

# The following types define the data model of the example service
# based on which the GraphQL API is generated

# type User @model {
#   id: ID! @isUnique
#   name: String
#   dateOfBirth: DateTime
#
#   # Uncomment below - you can declare relations between models like this
#
#   # posts: [Post!]! @relation(name: "UserPosts")
# }


# Uncomment the model below as well
#
# type Post @model {
#   id: ID! @isUnique
#   title: String!
#
#   # Every relation also required a back-relation (to determine 1:1, 1:n or n:m)
#   author: User! @relation(name: "UserPosts")
# }

# added by email-password template: (please uncomment)
